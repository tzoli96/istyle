<?php

namespace Oander\IstyleCustomization\Cron;

use Magento\Framework\App\Area;
use Magento\Framework\App\ResourceConnection;
use Magento\Framework\Exception\MailException;
use Magento\Framework\Mail\Template\TransportBuilder;
use Magento\Store\Model\Store;
use Magento\Store\Model\StoreManagerInterface;
use Oander\IstyleCustomization\Helper\Config;
use Magento\Framework\App\CacheInterface;
use Magento\Catalog\Model\ResourceModel\Category\CollectionFactory;
use Magento\UrlRewrite\Model\UrlFinderInterface;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;
use Magento\UrlRewrite\Service\V1\Data\UrlRewriteFactory;

/**
 * Class UrlChecker
 * @package Oander\IstyleCustomization\Cron
 */
class CategoryUrlChecker
{
    /**
     * @var ResourceConnection
     */
    protected $resourceConnection;
    /**
     * @var Config
     */
    private $config;

    /**
     * @var TransportBuilder
     */
    private $transportBuilder;

    /**
     * @var StoreManagerInterface
     */
    private $storeManager;

    /**
     * @var CollectionFactory
     */
    private $categoryCollectionFactory;

    /**
     * @var UrlFinderInterface
     */
    protected $urlFinder;

    /**
     * @var UrlRewriteFactory
     */
    protected $urlRewriteFactory;

    private $connection;

    private $selectSql;

    private $cache;

    private $emailData = [];

    /**
     * CategoryUrlChecker constructor.
     * @param CollectionFactory $categoryCollectionFactory
     * @param Config $config
     * @param StoreManagerInterface $storeManager
     * @param TransportBuilder $transportBuilder
     * @param ResourceConnection $resourceConnection
     * @param CacheInterface $cache
     * @param UrlFinderInterface $urlFinder
     * @param UrlRewriteFactory $urlRewriteFactory
     */
    public function __construct(
        CollectionFactory $categoryCollectionFactory,
        Config $config,
        StoreManagerInterface $storeManager,
        TransportBuilder $transportBuilder,
        ResourceConnection $resourceConnection,
        CacheInterface $cache,
        UrlFinderInterface $urlFinder,
        UrlRewriteFactory $urlRewriteFactory
    )
    {
        $this->urlFinder = $urlFinder;
        $this->categoryCollectionFactory = $categoryCollectionFactory;
        $this->config = $config;
        $this->transportBuilder = $transportBuilder;
        $this->storeManager = $storeManager;
        $this->cache = $cache;
        $this->connection = $resourceConnection->getConnection();
        $this->urlRewriteFactory = $urlRewriteFactory;
    }

    /**
     * @throws MailException
     */
    public function execute()
    {
        if (!$this->config->isUrlCheckerEnabled()) {
            return;
        }

        $errorTable = '';
        $stores = $this->storeManager->getStores(false);
        foreach ($stores as $store) {
            if (!$store->isActive()) {
                continue;
            }

            $this->check($store);
            if (!empty($this->emailData)) {
                foreach ($this->emailData as $error) {
                    $errorTable .= '<tr>';
                        $errorTable .= '<td>' . (string)$error['entity_type'] . '</td>';
                        $errorTable .= '<td>' . (string)$error['entity_id'] . '</td>';
                        $errorTable .= '<td>' . (string)$error['request_path'] . '</td>';
                        $errorTable .= '<td>' . (string)$error['target_path'] . '</td>';
                        $errorTable .= '<td>' . (string)$error['redirect_type'] . '</td>';
                        $errorTable .= '<td>' . (string)$error['store'] . '</td>';
                        $errorTable .= '<td>' . (string)$error['description'] . '</td>';
                        $errorTable .= '<td>' . (string)$error['is_autogenerated'] . '</td>';
                    $errorTable .= '</tr>';
                }
            }
        }

        if (!empty($errorTable)) {
            $this->send($errorTable);
        }

    }

    /**
     * @param $store
     * @return void
     */
    protected function check($store)
    {
        $collection = $this->categoryCollectionFactory->create();
        $collection->getSelect()->join(
            ['catalog_category_entity_varchar' => $collection->getTable('catalog_category_entity_varchar')],
            'e.entity_id = catalog_category_entity_varchar.entity_id AND catalog_category_entity_varchar.attribute_id=125
             AND catalog_category_entity_varchar.store_id=' . $store->getId() . '',
            ['store_id' => 'catalog_category_entity_varchar.store_id', 'url_path' => 'catalog_category_entity_varchar.value']);

        foreach ($collection as $category) {
            if ($category->getData("url_path")) {
                $url = $category->getData("url_path") . '.html';
                if ($this->findUrlRewrite($url, $store->getId())) {

                    $sqlScript = 'INSERT IGNORE INTO url_rewrite(entity_type, entity_id, request_path, target_path, redirect_type, store_id, description,is_autogenerated) 
                                VALUES ("category",' . $category->getId() . ',"' . $url . '","catalog/category/view/id/' . $category->getId() . '",0,' . $store->getId() . ',"sql script insert",1)';

                    $this->insert($sqlScript);
                    $this->emailData[] = [
                        'entity_type'               => 'category',
                        'entity_id'                 => $category->getId(),
                        'request_path'              => $url,
                        'target_path'               => "catalog/category/view/id/". $category->getId(),
                        'redirect_type'             => 0,
                        'store'                     => $store->getName(),
                        'description'               => "sql script insert",
                        'is_autogenerated'          => 1,
                    ];
                }
            }
        }

    }

    /**
     * @param $url
     * @param $storeId
     * @return bool
     */
    private function findUrlRewrite($url, $storeId): bool
    {
        $data = [
            UrlRewrite::REQUEST_PATH => $url,
            UrlRewrite::STORE_ID => $storeId,
        ];

        return (empty($this->urlFinder->findOneByData($data))) ? true : false;
    }

    /**
     * @return string
     */
    protected function insert($sql)
    {
        try {
            $this->connection->query($sql);
        } catch (\Exception $exception) {
            $insertResult = $exception->getMessage();
            return '<tr><td colspan="7">' . (string)$insertResult . '</td></tr>';
        }

        return '';
    }

    /**
     * @param string $errorTable
     *
     * @throws MailException
     */
    protected function send(string $errorTable)
    {
        $emailAddresses = $this->config->getUrlCheckerEmailReceivers();
        if (!empty($emailAddresses)) {
            $mainReceiver = $emailAddresses[0];
            unset($emailAddresses[0]);
            $transport = $this->transportBuilder->setTemplateIdentifier(
                'oander_url_checker_email_template'
            )->setTemplateOptions(
                [
                    'area' => Area::AREA_ADMINHTML,
                    'store' => Store::DEFAULT_STORE_ID,
                ]
            )->setTemplateVars(
                [
                    'errorTable' => $errorTable
                ]
            )->addTo(
                $mainReceiver
            )->addCc(
                $emailAddresses
            )->getTransport();
            $transport->sendMessage();
        }
    }
}