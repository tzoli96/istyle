<?php

namespace Oander\AddressFieldsProperties\Model\AddressFieldsAttribute;

use Magento\Store\Model\ScopeInterface;

class DataProvider extends \Magento\Ui\DataProvider\AbstractDataProvider
{
    /**
     * @var string
     */
    protected $requestScopeStoreFieldName = 'store';
    /**
     * @var string
     */
    protected $requestScopeWebsiteFieldName = 'website';
    /**
     * @var array
     */
    protected $loadedData;
    /**
     * @var \Magento\Framework\App\Request\DataPersistorInterface
     */
    protected $dataPersistor;
    /**
     * @var \Oander\AddressFieldsProperties\Helper\ConfigReader
     */
    private $configReader;
    /**
     * @var \Magento\Framework\App\RequestInterface
     */
    private $request;

    /**
     * Constructor
     *
     * @param string $name
     * @param string $primaryFieldName
     * @param string $requestFieldName
     * @param \Magento\Eav\Model\ResourceModel\Entity\Attribute\CollectionFactory $collectionFactory
     * @param \Magento\Framework\App\Request\DataPersistorInterface $dataPersistor
     * @param \Magento\Eav\Model\Config $eavConfig
     * @param \Magento\Framework\App\RequestInterface $request
     * @param \Oander\AddressFieldsProperties\Helper\ConfigReader $configReader
     * @param array $meta
     * @param array $data
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function __construct(
        $name,
        $primaryFieldName,
        $requestFieldName,
        \Magento\Eav\Model\ResourceModel\Entity\Attribute\CollectionFactory $collectionFactory,
        \Magento\Framework\App\Request\DataPersistorInterface $dataPersistor,
        \Magento\Eav\Model\Config $eavConfig,
        \Magento\Framework\App\RequestInterface $request,
        \Oander\AddressFieldsProperties\Helper\ConfigReader $configReader,
        array $meta = [],
        array $data = []
    ) {
        parent::__construct($name, $primaryFieldName, $requestFieldName, $meta, $data);
        $this->dataPersistor = $dataPersistor;
        $this->configReader = $configReader;
        $this->request = $request;
        $entityTypeId = $eavConfig->getEntityType(\Magento\Customer\Api\AddressMetadataInterface::ENTITY_TYPE_ADDRESS)->getId();
        $this->collection = $collectionFactory->create();
        $this->collection
            ->addFieldToSelect("attribute_id")
            ->addFieldToFilter(\Magento\Eav\Api\Data\AttributeInterface::ENTITY_TYPE_ID, $entityTypeId);
        //$this->meta = $this->prepareMeta($this->meta);
    }

    /**
     * Prepare meta data
     *
     * @param array $meta
     * @return array
     */
    public function prepareMeta($meta)
    {
        $meta = array_replace_recursive($meta, $this->prepareFieldsMeta(
            $this->getFieldsMap(),
            $this->getAttributesMeta()
        ));

        return $meta;
    }

    /**
     * Prepare fields meta based on xml declaration of form and fields metadata
     *
     * @param array $fieldsMap
     * @param array $fieldsMeta
     * @return array
     */
    private function prepareFieldsMeta($fieldsMap, $fieldsMeta)
    {
        $result = [];
        foreach ($fieldsMap as $fieldSet => $fields) {
            foreach ($fields as $field) {
                if (isset($fieldsMeta[$field])) {
                    $result[$fieldSet]['children'][$field]['arguments']['data']['config'] = $fieldsMeta[$field];
                }
            }
        }
        return $result;
    }

    public function getMeta()
    {
        return parent::getMeta(); // TODO: Change the autogenerated stub
    }

    /**
     * Get data
     *
     * @return array
     */
    public function getData()
    {
        if (isset($this->loadedData)) {
            return $this->loadedData;
        }

        $storeId = $this->request->getParam($this->requestScopeStoreFieldName);
        $websiteId = $this->request->getParam($this->requestScopeWebsiteFieldName);

        $items = $this->collection->getItems();
        foreach ($items as $model) {
            if($storeId)
                $model->setData("store_id", $storeId);
            if($websiteId)
                $model->setData("website_id", $websiteId);
            $properties = [];
            if ($storeId) {
                $properties = $this->configReader->readByAttribute($model->getId(), ScopeInterface::SCOPE_STORE, $storeId);
                $properties = $this->addUseDefaultSettings(
                    $properties,
                    $this->configReader->getNotDefaultConfigsByAttribute($model->getId(), ScopeInterface::SCOPE_STORE, $storeId)
                );
            } elseif ($websiteId) {
                $properties = $this->configReader->readByAttribute($model->getId(), ScopeInterface::SCOPE_WEBSITE, $websiteId);
                $properties = $this->addUseDefaultSettings(
                    $properties,
                    $this->configReader->getNotDefaultConfigsByAttribute($model->getId(), ScopeInterface::SCOPE_WEBSITE, $websiteId)
                );
            } else {
                $properties = $this->configReader->readByAttribute($model->getId());
                $properties = $this->addUseDefaultSettings(
                    $properties,
                    $this->configReader->getNotDefaultConfigsByAttribute($model->getId())
                );
            }
            $model->setData(
                array_replace_recursive(
                    $properties,
                    $model->getData()
                )
            );
            $this->loadedData[$model->getId()] = $model->getData();
        }
        $data = $this->dataPersistor->get('oander_addressfieldsproperties_addressfieldsattribute');
        
        if (!empty($data)) {
            $model = $this->collection->getNewEmptyItem();
            $model->setData($data);
            $this->loadedData[$model->getId()] = $model->getData();
            $this->dataPersistor->clear('oander_addressfieldsproperties_addressfieldsattribute');
        }
        
        return $this->loadedData;
    }

    /**
     * Add use config settings
     *
     * @param array $categoryData
     * @return array
     */
    protected function addUseDefaultSettings($validatorData, $notDefaultConfigs)
    {
        foreach ($validatorData['use_default'] as $field => $value) {
            if (in_array($field, $notDefaultConfigs)) {
                $validatorData['use_default'][$field] = false;
            }
        }
        return $validatorData;
    }

    /**
     * Get attributes meta
     *
     * @return array
     * @throws \Magento\Framework\Exception\LocalizedException
     * @SuppressWarnings(PHPMD.NPathComplexity)
     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
     */
    public function getAttributesMeta()
    {
        $result = [];

        $result = $this->getDefaultMetaData($result);

        return $result;
    }

    /**
     * Category's fields default values
     *
     * @param array $result
     * @return array
     */
    public function getDefaultMetaData($result)
    {
        $storeId = $this->request->getParam($this->requestScopeStoreFieldName);
        $websiteId = $this->request->getParam($this->requestScopeWebsiteFieldName);

        //$this->readConfig->getNotDefaultConfigs();

        if ($storeId || $websiteId) {

            $result['use_default.url_key']['checked'] = true;
            $result['use_default.url_key']['default'] = true;
            $result['use_default.url_key']['visible'] = true;
        } else {
            $result['use_default.url_key']['checked'] = false;
            $result['use_default.url_key']['default'] = false;
            $result['use_default.url_key']['visible'] = false;
        }
        return $result;
    }

    /**
     * @return array
     */
    protected function getFieldsMap()
    {
        return [
            'design' =>
                [
                    'attribute_id',
                    'store_id',
                    'website_id',
                    'placeholder',
                    'enable_formatting',
                    'blocks',
                    'delimiters',
                    'prefix',
                    'numbers_only',
                    'case'
                ],
            'validation' =>
                [
                    'validation_type',
                    'string_length',
                    'regex_pattern',
                    'error_message'
                ]
        ];
    }
}
