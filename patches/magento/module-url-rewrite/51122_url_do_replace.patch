diff --git a/vendor/magento/module-url-rewrite/Model/Storage/DbStorage.php b/vendor/magento/module-url-rewrite/Model/Storage/DbStorage.php
index 4d71e76f..1937b868 100644
--- a/vendor/magento/module-url-rewrite/Model/Storage/DbStorage.php
+++ b/vendor/magento/module-url-rewrite/Model/Storage/DbStorage.php
@@ -82,19 +82,128 @@ class DbStorage extends AbstractStorage
     }
 
     /**
-     * {@inheritdoc}
+     * @inheritDoc
      */
     protected function doReplace($urls)
     {
-        foreach ($this->createFilterDataBasedOnUrls($urls) as $type => $urlData) {
-            $urlData[UrlRewrite::ENTITY_TYPE] = $type;
-            $this->deleteByData($urlData);
+        $this->connection->beginTransaction();
+
+        try {
+            $this->deleteOldUrls($urls);
+
+            $data = [];
+            foreach ($urls as $url) {
+                $data[] = $url->toArray();
+            }
+
+            $this->insertMultiple($data);
+
+            $this->connection->commit();
+            // @codingStandardsIgnoreStart
+        } catch (\Magento\Framework\Exception\AlreadyExistsException $e) {
+            // @codingStandardsIgnoreEnd
+            $this->connection->rollBack();
+
+            /** @var \Magento\UrlRewrite\Service\V1\Data\UrlRewrite[] $urlConflicted */
+            $urlConflicted = [];
+            foreach ($urls as $url) {
+                $urlFound = $this->doFindOneByData(
+                    [
+                        UrlRewrite::REQUEST_PATH => $url->getRequestPath(),
+                        UrlRewrite::STORE_ID => $url->getStoreId(),
+                    ]
+                );
+                if (isset($urlFound[UrlRewrite::URL_REWRITE_ID])) {
+                    $urlConflicted[$urlFound[UrlRewrite::URL_REWRITE_ID]] = $url->toArray();
+                }
+            }
+            if ($urlConflicted) {
+                throw new \Magento\UrlRewrite\Model\Exception\UrlAlreadyExistsException(
+                    __('URL key for specified store already exists.'),
+                    $e,
+                    $e->getCode(),
+                    $urlConflicted
+                );
+            } else {
+                throw $e->getPrevious() ?: $e;
+            }
+        } catch (\Exception $e) {
+            $this->connection->rollBack();
+
+            throw $e;
         }
-        $data = [];
+
+        return $urls;
+    }
+
+
+    /**
+     * Delete old URLs from DB.
+     *
+     * @param  UrlRewrite[] $urls
+     * @return void
+     */
+    private function deleteOldUrls(array $urls)
+    {
+        $oldUrlsSelect = $this->connection->select();
+        $oldUrlsSelect->from(
+            $this->resource->getTableName(self::TABLE_NAME)
+        );
+
+        $uniqueEntities = $this->prepareUniqueEntities($urls);
+        foreach ($uniqueEntities as $storeId => $entityTypes) {
+            foreach ($entityTypes as $entityType => $entities) {
+                $oldUrlsSelect->orWhere(
+                    $this->connection->quoteIdentifier(
+                        UrlRewrite::STORE_ID
+                    ) . ' = ' . $this->connection->quote($storeId, 'INTEGER') .
+                    ' AND ' . $this->connection->quoteIdentifier(
+                        UrlRewrite::ENTITY_ID
+                    ) . ' IN (' . $this->connection->quote($entities, 'INTEGER') . ')' .
+                    ' AND ' . $this->connection->quoteIdentifier(
+                        UrlRewrite::ENTITY_TYPE
+                    ) . ' = ' . $this->connection->quote($entityType)
+                );
+            }
+        }
+
+        // prevent query locking in a case when nothing to delete
+        $checkOldUrlsSelect = clone $oldUrlsSelect;
+        $checkOldUrlsSelect->reset(\Magento\Framework\DB\Select::COLUMNS);
+        $checkOldUrlsSelect->columns('count(*)');
+        $hasOldUrls = (bool)$this->connection->fetchOne($checkOldUrlsSelect);
+
+        if ($hasOldUrls) {
+            $this->connection->query(
+                $oldUrlsSelect->deleteFromSelect(
+                    $this->resource->getTableName(self::TABLE_NAME)
+                )
+            );
+        }
+    }
+
+
+    /**
+     * Prepare array with unique entities
+     *
+     * @param  UrlRewrite[] $urls
+     * @return array
+     */
+    private function prepareUniqueEntities(array $urls)
+    {
+        $uniqueEntities = [];
+        /** @var UrlRewrite $url */
         foreach ($urls as $url) {
-            $data[] = $url->toArray();
+            $entityIds = (!empty($uniqueEntities[$url->getStoreId()][$url->getEntityType()])) ?
+                $uniqueEntities[$url->getStoreId()][$url->getEntityType()] : [];
+
+            if (!\in_array($url->getEntityId(), $entityIds)) {
+                $entityIds[] = $url->getEntityId();
+            }
+            $uniqueEntities[$url->getStoreId()][$url->getEntityType()] = $entityIds;
         }
-        $this->insertMultiple($data);
+
+        return $uniqueEntities;
     }
 
     /**
